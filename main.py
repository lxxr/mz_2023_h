# streamlit_app.py

import time  # to simulate a real time data, time loop
import numpy as np  # np mean, np random
import streamlit as st
import pandas as pd
from io import StringIO


st.set_page_config(
    page_title="Med4Pro –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤",
    page_icon="‚úÖ",
    layout="wide",
)
def check_password():
    """Returns `True` if the user had a correct password."""

    def password_entered():
        """Checks whether a password entered by the user is correct."""
        if (
            st.session_state["username"] in st.secrets["passwords"]
            and st.session_state["password"]
            == st.secrets["passwords"][st.session_state["username"]]
        ):
            st.session_state["password_correct"] = True
            del st.session_state["password"]  # don't store username + password
            del st.session_state["username"]
        else:
            st.session_state["password_correct"] = False

    if "password_correct" not in st.session_state:
        # First run, show inputs for username + password.
        st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", on_change=password_entered, key="username")
        st.text_input(
            "–ü–∞—Ä–æ–ª—å", type="password", on_change=password_entered, key="password"
        )
        return False
    elif not st.session_state["password_correct"]:
        # Password not correct, show input + error.
        st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", on_change=password_entered, key="username")
        st.text_input(
            "–ü–∞—Ä–æ–ª—å", type="password", on_change=password_entered, key="password"
        )
        st.error("üòï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–µ–Ω")
        return False
    else:
        # Password correct.
        return True

if check_password():
    st.title("Med4Pro - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤")

    # read  from a github repo
    base_standarts_url = "https://github.com/lxxr/mz_2023_h/raw/main/base_standarts.xlsx"


    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏–∑ –ï–ú–ò–ê–° –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    columns = ['–ü–æ–ª –ø–∞—Ü–∏–µ–Ω—Ç–∞','–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞','ID –ø–∞—Ü–∏–µ–Ω—Ç–∞','–ö–æ–¥ –ú–ö–ë-10','–î–∏–∞–≥–Ω–æ–∑','–î–∞—Ç–∞ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥–∏','–î–æ–ª–∂–Ω–æ—Å—Ç—å','–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è','–ó–∞–º–µ—á–∞–Ω–∏—è']

    data=[]
    if uploaded_file is not None:
        data=pd.read_excel(uploaded_file, sheet_name='Sheet1')

    @st.cache_data
    def get_data() -> pd.DataFrame:
       return pd.DataFrame(data)#pd.read_csv(dataset_url)

    if uploaded_file is not None:
#        print(data)
        df = get_data()
        df["–û—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö"] = "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"

        st.checkbox("–ü–æ —à–∏—Ä–∏–Ω–µ –æ–∫–Ω–∞", value=False, key="use_container_width")
        st.dataframe(df.style.highlight_max(axis=0),use_container_width=st.session_state.use_container_width)
